name: Reusable GCR Vulnerability Docker container scanning

on:
  workflow_call:
    inputs:
      working_directory:
        required: false
        type: string
        default: "."
      dockerfile_path:
        required: false
        type: string
        default: Dockerfile
      docker_image_name:
        required: true
        type: string
      docker_image_tag:
        required: true
        type: string
      scan_output_format:
        required: false
        type: string
        default: "table(vulnerability.effectiveSeverity, vulnerability.cvssScore, noteName, vulnerability.packageIssue[0].affectedPackage, vulnerability.packageIssue[0].affectedVersion.name, vulnerability.packageIssue[0].fixedVersion.name)"
      scan_remote:
        required: false
        type: boolean
        default: true
      jira_project:
        required: true
        type: string
      jira_issuetype:
        required: true
        type: string
      jira_jql:
        required: true
        type: string
    secrets:
      GCP_JSON_KEY:
        required: true

      JIRA_BASE_URL:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true

jobs:
  docker-verify-image:
    runs-on: [self-hosted, common]
    steps:
      - name: Checkout
        if: inputs.scan_remote == 'false'
        uses: actions/checkout@v2

      - name: Set up Docker Context for Buildx
        if: inputs.scan_remote == 'false'
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        if: inputs.scan_remote == 'false'
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Build image
        if: inputs.scan_remote == 'false'
        working-directory: ${{ inputs.working_directory }}
        run: |
          docker build . -f ${{ inputs.dockerfile_path }} -t ${{ inputs.docker_image_name }}:${{ inputs.docker_image_tag }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"
        with:
          install_components: 'local-extract'

      - name: "Authenticate to Google Cloud"
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_JSON_KEY }}"

      - name: Scan Image
        id: scan_image
        run: |
          SCAN_ID=$(gcloud artifacts docker images scan ${{ inputs.scan_remote == true && '--remote' || '' }} \
            --format='value(response.scan)' \
            ${{ inputs.docker_image_name }}:${{ inputs.docker_image_tag }})

          SCAN_OUTPUT=$(gcloud artifacts docker images list-vulnerabilities ${SCAN_ID} \
            --format "${{ inputs.scan_output_format }}")

          grep -q EFFECTIVE_SEVERITY <<< ${SCAN_OUTPUT} || EXIT_CODE=$?
          if [[ ${EXIT_CODE} -eq 0 ]]; then
              VULNERABILITIES_FOUND='true'
          else
              VULNERABILITIES_FOUND='false'
          fi

          # Escaping characters
          SCAN_OUTPUT="${SCAN_OUTPUT//'%'/'%25'}"
          SCAN_OUTPUT="${SCAN_OUTPUT//$'\n'/'%0A'}"
          SCAN_OUTPUT="${SCAN_OUTPUT//$'\r'/'%0D'}"

          echo ::set-output name=scan_output::"${SCAN_OUTPUT}"
          echo ::set-output name=vulnerable::"${VULNERABILITIES_FOUND}"

          [[ ${VULNERABILITIES_FOUND} == 'false' ]]

      - name: Setup Jira cli
        if: failure() && steps.scan_image.outputs.vulnerable == 'true'
        uses: atlassian/gajira-cli@master

      - name: Jira Login
        if: failure() && steps.scan_image.outputs.vulnerable == 'true'
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Check Jira issue existence
        if: failure() && steps.scan_image.outputs.vulnerable == 'true'
        id: issue_check
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          JIRA_ISSUES_COUNT="$(jira list \
            --query '${{ inputs.jira_jql }}' | wc -l)"

          echo ::set-output name=issues_found::"${JIRA_ISSUES_COUNT}"

      - name: Create Jira Issue
        id: create_jira_issue
        if: failure() && steps.issue_check.outputs.issues_found == 0 && steps.scan_image.outputs.vulnerable == 'true'
        uses: atlassian/gajira-create@master
        with:
          project: ${{ inputs.jira_project }}
          issuetype: ${{ inputs.jira_issuetype }}
          summary: |
            Fix Vulnerability Issues found in ${{ github.event.repository.name }}
          description: |
            GitHub Actions Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Results:
            {noformat}${{ steps.scan_image.outputs.scan_output }}{noformat}
          fields: '{"labels": ["${{ github.event.repository.name }}"]}'
